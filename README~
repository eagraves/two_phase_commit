	My program works with a central server that functions as the coordinator of the two-phase commit system. It then has two (identically coded) clients that functions as participants. The coordinator must be started first. A port number is given at the command line. Each of the participants are then started up with the server's IP address and port at the command line. Each automatically connects to the server. When the first one connects, a thread is spawned for it and the user is notified that the coordinator is waiting for a second participant connects. Once the second client connects, a second thread is spawned and the user is notified that they may now initiate a vote. This vote (unintentionally and unnecessarily) occurs in each thread. So the user must make the request twice: once for each participant. Once that is done, each participant (which have been waiting for the coordinator's vote request) will prompt the user to commit or abort.  They will send the user's decision back to the coordinator. Once it has received the two decisions, it will send them out to the participants. A unanimous agreement to commit required for that to be the decision. Otherwise it will be to abort. After this point the participants will both tell the user the coordinators decision and exit. The coordinator will remain active for other participants.
	With just a few changes, since the coordinator is multi-threaded and could in theory handle many more threads, more participants could be connected. The number was limited to two for simplicity, and voting was disallowed until that number was reached, but this could be done differently, so long as no new participants were not allowed to connect during voting. With more time, the system could be made much more robust for cases when participants or the coordinator disconnect, or when requests are lost. This might involve timeouts and/or election of a new coordinator when the original one is lost.
